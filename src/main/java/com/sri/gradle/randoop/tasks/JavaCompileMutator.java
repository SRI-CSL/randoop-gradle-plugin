package com.sri.gradle.randoop.tasks;

import com.sri.gradle.randoop.Constants;
import com.sri.gradle.randoop.utils.ImmutableStream;
import com.sri.gradle.randoop.utils.JavaProjectHelper;
import com.sri.gradle.randoop.utils.MoreFiles;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import org.gradle.api.Project;
import org.gradle.api.file.Directory;
import org.gradle.api.file.FileCollection;
import org.gradle.api.file.SourceDirectorySet;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.compile.JavaCompile;

@SuppressWarnings("UnstableApiUsage")
public class JavaCompileMutator {
  private final FileCollection compileJavaClasspath;
  private final JavaProjectHelper projectHelper;

  public JavaCompileMutator(Project project, FileCollection compileJavaClasspath) {
    this.compileJavaClasspath = compileJavaClasspath;
    this.projectHelper = new JavaProjectHelper(project);
  }

  public void mutateJavaCompileTask(JavaCompile javaCompile) {
    configureCompilerArgs(javaCompile);
    configureClasspath(javaCompile);
    configureSourcesAndDestinations(javaCompile);
  }

  private void configureCompilerArgs(JavaCompile javaCompile) {
    List<String> compilerArgs = buildCompilerArgs(javaCompile);
    javaCompile.getOptions().setCompilerArgs(compilerArgs);
  }

  private void configureClasspath(JavaCompile javaCompile) {
    Set<File> runtimeClasspath = getProjectHelper().getRuntimeClasspath();
    javaCompile.setClasspath(
        getProjectHelper().getProject().files(this.compileJavaClasspath, runtimeClasspath));
  }

  // Setting the sourcepath and source set is necessary when using forked compilation for
  // AutoGeneratedTestDriver.java
  private void configureSourcesAndDestinations(JavaCompile javaCompile) {
    final Directory testClassesDir = getProjectHelper().getBuildTestDir();
    javaCompile.setDestinationDir(testClassesDir.getAsFile());

    SourceDirectorySet sds =
        javaCompile
            .getProject()
            .getObjects()
            .sourceDirectorySet(
                "randoop", // a short name for the new set
                "randoop") // a human consumable display name for the set
            .srcDir(getProjectHelper().getSrcTestDir());

    final SourceSet sourceSet = getProjectHelper().getTestSourceSet();
    final Set<File> javaFiles = new HashSet<>();
    for (File eachDir : sourceSet.getJava().getSrcDirs()) {
      javaFiles.addAll(
          MoreFiles.getMatchingFiles(eachDir.toPath(), Constants.EXPECTED_RANDOOP_TEST_NAME_REGEX));
    }

    final Set<File> randoopOutDir =
        ImmutableStream.setCopyOf(
            javaFiles.stream().filter(Objects::nonNull).map(File::getParentFile));

    javaCompile.setSource(sds);
    if (!randoopOutDir.isEmpty()) {
      javaCompile.setSource(sds);
      javaCompile.getOptions().setSourcepath(javaCompile.getProject().files(randoopOutDir));
    }
  }

  private static List<String> buildCompilerArgs(JavaCompile javaCompile) {
    return new ArrayList<>(javaCompile.getOptions().getCompilerArgs());
  }

  JavaProjectHelper getProjectHelper() {
    return projectHelper;
  }
}
